---
title: "BEE 4750/5750 Homework 3"
author: "Sarah Mack (skm237)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1

There are three decision variables. 
Generator type capacity at installation, energy production over a time period, and non-served energy over a time period.
These are respectively:

```math

x_g, y_{g,t}, nse_t

```



## Problem 1.2

The objective function minimizes cost. The total cost includes the investment cost, the operating cost, and the
non-served energy cost. The investment cost is the sum of the individual generator installation cost times its capacity.
The total operating cost is the sum of the time in the period times the individual operating cost times the generation during
that time period. The total non-served energy is the sum of the non-served energy cost times the non-served energy production 
during that time period.

```math

\min(COST) = \sum C_g^{INV}x_g + \sum\sum L_t C_g^{OP} y_{g,t} + \sum_t C_t^{NSE} nse_t

```



## Problem 1.3

Generators cannot produce more than their installed capacity and availability, so the energy production over a time period must
be less than or equal to the installed capacity times the capacity factor:

```math

y_{g,t} \leq x_g * CF_{g,t}

```

Need to serve load during each time period, so the sum of the production and non-served energy production should be less than
or equal to the demand:

```math

\sum (y_{g,t} + nse_{t}) \leq demand_t

```

Installation capacity and energy production must be non-negative, which was established when the variables were created.



## Problem 1.4

```julia

using JuMP
using HiGHS

# create model
gencap = Model(HiGHS.Optimizer)

# add different energy gen types
generators = ["geothermal", "coal", "ccgt", "ct", "wind", "solar"];

# variables
G = 1:length(generators);
T = 1:length(hours);
@variable(gencap, x[G] >= 0);
@variable(gencap, y[G,T] >= 0);
@variable(gencap, nse[T] >= 0);

# create objective function
@objective(gencap, Min, investment_cost'*x + ((22*sum(y[2,:]) + 35*sum(y[3,:]) + 45*sum(y[4,:]))*365 + 365*1000*sum(nse)));

# generators cannot produce more than their installed capacity and availability
avail = zeros(length(G), length(T));
avail[1,:] = thermal_cf[1]*ones(length(T));
avail[2,:] = thermal_cf[2]*ones(length(T));
avail[3,:] = thermal_cf[3]*ones(length(T));
avail[4,:] = thermal_cf[4]*ones(length(T));
avail[5,:] = wind_cf;
avail[6,:] = solar_cf;
@constraint(gencap, availability[g in G, t in T], y[g, t] <= avail[g, t] * x[g]);

# need to serve load during each time period
@constraint(gencap, load[t in T], sum(y[:,t]) + nse[t] == demand[t]);

# non-negativity established when the variables were created

```



## Problem 1.5

```julia

optimize!(gencap)
objective_value(gencap)
value.(x)
value.(y)
value.(nse)

```

The cost of the optimized model is $ 912,142,212. The installation plan is detailed in the table below.
The non-served energy is always 0.

```julia

using DataFrames

results = DataFrame(
            "Generation Type"        => generators,
            "Installed MW"  => value.(x).data,
            )

```



## Problem 1.6

```julia

using Plots




```

# Problem 2

## Problem 2.1

## Problem 2.2

## Problem 2.3

## Problem 2.4

## Problem 2.5

# References


Extracting JuMP results. Julia Discourse. https://discourse.julialang.org/t/extracting-jump-results/51429 

First Steps with DataFrames.jl. DataFrames.jl Documentation. https://dataframes.juliadata.org/stable/man/basics/#First-Steps-with-DataFrames.jl 